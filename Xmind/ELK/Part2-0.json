
## 基于词项和基于全文的搜索

基于 Term 的查询
	Term 的重要性
		Term 是表达语意的最⼩单位。搜索和利⽤统计语⾔模型进⾏⾃然语⾔处理都需要处理 Term
	特点
		Term Level Query: Term Query / Range Query / Exists Query / Prefix Query /Wildcard Query
		在 ES 中，Term 查询，对输⼊不做分词。会将输⼊作为⼀个整体，在倒排索引中查找准确的词项，并且使⽤相关度算分公式为每个包含该词项的⽂档进⾏相关度算分 – 例如“Apple Store”
		可以通过 Constant Score 将查询转换成⼀个 Filtering，避免算分，并利⽤缓存，提⾼性能




DELETE products
PUT products
{
  "settings": {
    "number_of_shards": 1
  }
}

# 关于 Term 查询的例⼦
	• Term 查询查看算分
	• ⼏个查询的结果分别是什么？
	• 如果搜不到，为什么？
	• 应该如何解决

POST /products/_bulk
{ "index": { "_id": 1 }}
{ "productID" : "XHDK-A-1293-#fJ3","desc":"iPhone" }
{ "index": { "_id": 2 }}
{ "productID" : "KDKE-B-9947-#kL5","desc":"iPad" }
{ "index": { "_id": 3 }}
{ "productID" : "JODL-X-1937-#pV7","desc":"MBP" }


# 基于词项的查找 vs 基于全⽂的查找
GET /products
Result：
{
  "products" : {
    "aliases" : { },
    "mappings" : {
      "properties" : {
        "desc" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        },
        "productID" : {
          "type" : "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }
        }
      }
    },
    "settings" : {
      "index" : {
        "creation_date" : "1584945306322",
        "number_of_shards" : "1",
        "number_of_replicas" : "1",
        "uuid" : "gdLiJvO2QkWjZOMiWtgTiw",
        "version" : {
          "created" : "7010199"
        },
        "provided_name" : "products"
      }
    }
  }
}


# 通过字段，Mapping 控制字段的分词
	通过参数控制查询的 Precision & Recall
	“Text” vs “Keyword”

POST /products/_search
{
  "query": {
    "term": {
      "desc": {
        //"value": "iPhone"
        "value":"iphone"
      }
    }
  }
}
Result： P大写搜不到，小写搜得到


POST /products/_search
{
  "query": {
    "term": {
      "desc.keyword": {
        //"value": "iPhone"
        //"value":"iphone"
      }
    }
  }
}
Result： P小写搜不到，大写搜得到



POST /products/_search
{
  "query": {
    "term": {
      "productID": {
        "value": "XHDK-A-1293-#fJ3"
      }
    }
  }
}

POST /products/_search
{
  //"explain": true,
  "query": {
    "term": {
      "productID.keyword": {
        "value": "XHDK-A-1293-#fJ3"
      }
    }
  }
}



# 复合查询 – Constant Score 转为 Filter
	 Query 转成 Filter，忽略 TF-IDF 计算，避免相关性算分的开销
	 Filter 可以有效利⽤缓存
POST /products/_search
{
  "explain": true,
  "query": {
    "constant_score": {
      "filter": {
        "term": {
          "productID.keyword": "XHDK-A-1293-#fJ3"
        }
      }

    }
  }
}
Result："max_score" : 1.0


字符串类型常用的其他属性
index_options：索引选项控制添加到倒排索引（Inverted Index）的信息，这些信息用于搜索（Search）和高亮显示： 
	docs：只索引文档编号(Doc Number)
	freqs：索引文档编号和词频率（term frequency）
	positions：索引文档编号，词频率和词位置（序号）
	offsets：索引文档编号，词频率，词偏移量（开始和结束位置）和词位置（序号）
	默认情况下，被分析的字符串（analyzed string）字段使用positions，其他字段使用docs; 
ignore_above：该属性指定一个整数值，当字符串字段（analyzed string field）的字节数量大于该数值之后，超过长度的部分字符数据将不能被analyzer处理，不能被编入索引；对于 not analyzed string字段，超过长度的部分字符将被忽略，不会被编入索引。默认值是0，禁用该属性；


#设置 position_increment_gap：该属性指定在相同词的位置上增加的gap，默认值是100；

DELETE groups
PUT groups
{
  "mappings": {
    "properties": {
      "names":{
        "type": "text",
        "position_increment_gap": 0
      }
    }
  }
}

GET groups/_mapping

POST groups/_doc
{
  "names": [ "John Water", "Water Smith"]
}


# 基于全⽂的查询
	基于全⽂本的查找
		Match Query / Match Phrase Query / Query String Query
	特点	
		索引和搜索时都会进⾏分词，查询字符串先传递到⼀个合适的分词器，然后⽣成⼀个供查询的词项列表
		查询时候，先会对输⼊的查询进⾏分词，然后每个词项逐个进⾏底层的查询，最终将结果进⾏合并。并为每个⽂档⽣成⼀个算分。- 例如查 “Matrix reloaded”，会查到包括 Matrix 或者 reload的所有结果

# Match Query
POST groups/_search
{
  "query": {
    "match": {
      "names":{
      	"query":"Water Smith"
      } 
    }
  }
}
"max_score" : 0.68324494

# Operator
POST groups/_search
{
  "profile":true,
  "query": {
    "match": {
      "names":{
      	"query":"Water Smith",
      	"operator":"AND"
      } 
    }
  }
}
"max_score" : 0.68324494


# Minimum_should_match:，该参数控制一个文档必须匹配的should子查询的数量
POST groups/_search
{
  "profile":true,
  "query": {
    "match": {
      "names":{
      	"query":"Water Smith",
      	"minimum_should_match":2
      } 
    }
  }
}
"max_score" : 0.68324494

# Match Phrase Query
POST groups/_search
{
  "query": {
    "match_phrase": {
      "names": "Water Smith"
    }
  }
}
"max_score" : 0.5753642

POST groups/_search
{
  "query": {
    "match_phrase": {
      "names": {
        "query": "Water Water",
        "slop": 100
      }
    }
  }
}
"max_score" : 0.5753642

# Match Query 查询过程


Matrix reload
Matrix                       reload
根据title的倒排索引查询并打分  根据title的倒排索引查询并打分
汇总得分
按照得分排序，返回结果






------------


## 结构化搜索:对结构化数据的搜索(⽇期，布尔类型和数字都是结构化的)

⽂本也可以是结构化的
	如彩⾊笔可以有离散的颜⾊集合： 红（red） 、 绿（green） 、 蓝（blue）
	⼀个博客可能被标记了标签，例如，分布式（distributed） 和 搜索（search）
	电商⽹站上的商品都有 UPCs（通⽤产品码 Universal Product Codes）或其他的唯⼀标识，它们都需要遵从严格规定的、结构化的格式。

ES 中的结构化搜索
	布尔，时间，⽇期和数字这类结构化数据：有精确的格式，我们可以对这些格式进⾏逻辑操作。包括⽐较数字或时间的范围，或判定两个值的⼤⼩
	结构化的⽂本可以做精确匹配或者部分匹配
		Term 查询 / Prefix 前缀查询
	结构化结果只有“是”或“否”两个值
		根据场景需要，可以决定结构化搜索是否需要打分


#结构化搜索，精确匹配
DELETE products
POST /products/_bulk
{ "index": { "_id": 1 }}
{ "price" : 10,"avaliable":true,"date":"2018-01-01", "productID" : "XHDK-A-1293-#fJ3" }
{ "index": { "_id": 2 }}
{ "price" : 20,"avaliable":true,"date":"2019-01-01", "productID" : "KDKE-B-9947-#kL5" }
{ "index": { "_id": 3 }}
{ "price" : 30,"avaliable":true, "productID" : "JODL-X-1937-#pV7" }
{ "index": { "_id": 4 }}
{ "price" : 30,"avaliable":false, "productID" : "QQPX-R-3956-#aD8" }

GET products/_mapping



#对布尔值 match 查询，有算分
POST products/_search
{
  "profile": "true",
  "explain": true,
  "query": {
    "term": {
      "avaliable": true
    }
  }
}

#对布尔值，通过constant score 转成 filtering，没有算分
POST products/_search
{
  "profile": "true",
  "explain": true,
  "query": {
    "constant_score": {
      "filter": {
        "term": {
          "avaliable": true
        }
      }
    }
  }
}


#数字类型 Term
POST products/_search
{
  "profile": "true",
  "explain": true,
  "query": {
    "term": {
      "price": 30
    }
  }
}

#数字类型 terms 查找多个精确值
POST products/_search
{
  "query": {
    "constant_score": {
      "filter": {
        "terms": {
          "price": [
            "20",
            "30"
          ]
        }
      }
    }
  }
}

#数字 Range 查询
GET products/_search
{
    "query" : {
        "constant_score" : {
            "filter" : {
                "range" : {
                    "price" : {
                        "gte" : 20,
                        "lte"  : 30
                    }
                }
            }
        }
    }
}


#字符类型 terms
POST products/_search
{
  "query": {
    "constant_score": {
      "filter": {
        "terms": {
          "productID.keyword": [
            "QQPX-R-3956-#aD8",
            "JODL-X-1937-#pV7"
          ]
        }
      }
    }
  }
}



# 日期 range
	y M w d H/h m s
	gt大于 lt小于 gte大于等于 lte小于等于
POST products/_search
{
    "query" : {
        "constant_score" : {
            "filter" : {
                "range" : {
                    "date" : {
                      "gte" : "now-1y"
                    }
                }
            }
        }
    }
}



#exists查询 处理空值
POST products/_search
{
  "query": {
    "constant_score": {
      "filter": {
        "exists": {
          "field": "date"
        }
      }
    }
  }
}

POST products/_search
{
	"query":{
		"constant_score":{
			"filter":{
				"bool":{
					"must_not":{
						"exists":{
							"field":"date"
						}
					}
				}
			}
		}
	}
}

#处理多值字段
POST /movies/_bulk
{ "index": { "_id": 1 }}
{ "title" : "Father of the Bridge Part II","year":1995, "genre":"Comedy"}
{ "index": { "_id": 2 }}
{ "title" : "Dave","year":1993,"genre":["Comedy","Romance"] }


#处理多值字段，term 查询是包含，而不是等于。针对多值字段查询要尤其注意
POST movies/_search
{
  "query": {
    "constant_score": {
      "filter": {
        "term": {
          "genre.keyword": "Comedy"
        }
      }
    }
  }
}





--------

## 搜索的相关性算分

相关性和相关性算分
	相关性 – Relevance
		搜索的相关性算分，描述了⼀个⽂档和查询语句匹配的程度。ES 会对每个匹配查询条件的结果进⾏算分 _score
		打分的本质是排序，需要把最符合⽤户需求的⽂档排在前⾯。ES 5 之前，默认的相关性算分采⽤ TF-IDF，现在采⽤ BM 25
		词（Term） ⽂档（Doc Id）
		区块链        1，2，3 
		的           2，3，4，5，6，7，8，10，12，13，15，18，19，20
		应⽤         2，3，8，9，10，13，15


词频 TF
	Term Frequency：检索词在⼀篇⽂档中出现的频率
		检索词出现的次数除以⽂档的总字数
	度量⼀条查询和结果⽂档相关性的简单⽅法：简单将搜索中每⼀个 词的 TF 进⾏相加	
		TF(区块链) + TF(的) + TF(应⽤)
	Stop Word	
		“的” 在⽂档中出现了很多次，但是对贡献相关度⼏乎没有⽤处，不应该考虑他们的 TF


逆⽂档频率 IDF
	DF：检索词在所有⽂档中出现的频率
		● “区块链”在相对⽐较少的⽂档中出现
		● “应⽤”在相对⽐较多的⽂档中出现
		● “Stop Word” 在⼤量的⽂档中出现
	Inverse Document Frequency ：简单说 = log(全部⽂档数/检索词出现过的⽂档总数)
	TF-IDF 本质上就是将 TF 求和变成了加权求和
		TF(区块链)*IDF(区块链) + TF(的)*IDF(的)+ TF(应⽤)*IDF(应⽤)
					出现的⽂档数 	总⽂档数 	IDF
			区块链 	200 万 		10 亿 		log(500) = 8.96
			的 		10 亿 		10 亿 		log(1) = 0
			应⽤ 	5 亿 		10 亿 		Log(2) = 1

Lucene 中的 TF-IDF 评分公式
score(q,d)=coord(q,d)*queryNorm(q)*累加公式t in q(tf(t in d)*idf(t)^2*boost(t)*norm(t,d))

score(q,d)：相关性打分函数 q查询语句 d 匹配的文档
累加公式t in q：t为分词后的词项
tf(t in d)：tf计算
idf(t)^2：idf计算
boost(t)：boost提升
norm(t,d)：field lenght norm计算，文档越短，相关性越高

BM 25
	和经典的TF-IDF相⽐，当 TF ⽆限增加时，BM 25算分会趋于⼀个数值	
		传统 TF Score = sqrt(tf)
		BM25的 TF Score = ((k + 1) * tf) / (k + tf)

词频对TF Score影响的走势图。从图中可以看到，当tf增加时，TF Score跟着增加，但是BM25的TF Score会被限制在0~k+1之间。它可以无限逼近k+1，但永远无法触达它。
这在业务上可以理解为某一个因素的影响强度不能是无限的，而是有个最大值，这也符合我们对文本相关性逻辑的理解。 在Lucence的默认设置里，k＝1.2

BM25如何对待文档长度
  BM25还引入了平均文档长度的概念，单个文档长度对相关性的影响力与它和平均长度的比值有关系。
  BM25的TF公式里，除了k外，引入另外两个参数：L和b。L是文档长度与平均长度的比值。如果文档长度是平均长度的2倍，则L＝2。b是一个常数，它的作用是规定L对评分的影响有多大。加了L和b的公式变为：
	TF Score = ((k + 1) * tf) / (k * (1.0 - b + b * L) + tf)
	文档越短，它逼近上限的速度越快，反之则越慢。这是可以理解的，对于只有几个词的内容，比如文章“标题”，只需要匹配很少的几个词，就可以确定相关性。而对于大篇幅的内容，比如一本书的内容，需要匹配很多词才能知道它的重点是讲什么。

参数b的作用是设定L对评分的影响有多大。如果把b设置为0，则L完全失去对评分的影响力。b的值越大，L对总评分的影响力越大。此时，相似度最终的完整公式为：
	simlarity = IDF * ((k + 1) * tf) / (k * (1.0 - b + b * (|d|/avgDl)) + tf)


PUT testscore
{
  "settings": {
    "number_of_shards": 1
  },
  "mappings": {
    "properties": {
      "content": {
        "type": "text"
      }
    }
  }
}


PUT testscore/_bulk
{ "index": { "_id": 1 }}
{ "content":"we use Elasticsearch to power the search" }
{ "index": { "_id": 2 }}
{ "content":"we like elasticsearch" }
{ "index": { "_id": 3 }}
{ "content":"The scoring of documents is caculated by the scoring formula" }
{ "index": { "_id": 4 }}
{ "content":"you know, for search" }



	● 查询中的 TF 和 IDF ？ 
	● 结果如何排序？
	● ⽂档⻓短 /TF / IDF 对相关度算分的影响
POST /testscore/_search
{
  //"explain": true,
  "query": {
    "match": {
      "content":"you"
//"content": "elasticsearch"
//"content":"the"
//"content": "the elasticsearch"
    }
  }
}


# Boosting Relevance
	Boosting 是控制相关度的⼀种⼿段
		索引，字段 或查询⼦条件
	参数 boost的含义	
		当boost > 1 时，打分的相关度相对性提升
		当 0 < boost < 1 时，打分的权重相对性降低
		当 boost < 0 时，贡献负分


POST testscore/_search
{
    "query": {
        "boosting" : {
            "positive" : {
                "term" : {
                    "content" : "elasticsearch"
                }
            },
            "negative" : {
                 "term" : {
                     "content" : "like"
                }
            },
            "negative_boost" : 0.2
        }
    }
}



---------------


## Query & Filtering 与多字符串多字段查询

⾼级搜索的功能：⽀持多项⽂本输⼊，针对多个字段进⾏搜索。
搜索引擎⼀般也提供基于时间，价格等条件的过滤
在 Elasticsearch 中，有Query 和 Filter 两种不同的 Context
	Query Context：相关性算分
	Filter Context：不需要算分（ Yes or No），可以利⽤ Cache， 获得更好的性能


POST /products/_bulk
{ "index": { "_id": 1 }}
{ "price" : 10,"avaliable":true,"date":"2018-01-01", "productID" : "XHDK-A-1293-#fJ3" }
{ "index": { "_id": 2 }}
{ "price" : 20,"avaliable":true,"date":"2019-01-01", "productID" : "KDKE-B-9947-#kL5" }
{ "index": { "_id": 3 }}
{ "price" : 30,"avaliable":true, "productID" : "JODL-X-1937-#pV7" }
{ "index": { "_id": 4 }}
{ "price" : 30,"avaliable":false, "productID" : "QQPX-R-3956-#aD8" }


复合查询： bool Query：同时包含多逻辑，并且有⽐较好的性能
	⼀个 bool 查询，是⼀个或者多个查询⼦句的组合
	总共包括 4 种⼦句。其中 2 种会影响算分，2 种不影响算分
		must    ： 必须匹配。          贡献算分
		should  ： 选择性匹配。        贡献算分
		must_not： Filter Context  必须不能匹配
		filter  ： Filter Context  必须匹配，但是不贡献算分

#基本语法
	如果你的 bool 查询中，没有 must 条件，should 中必须⾄少满⾜⼀条查询
POST /products/_search
{
  "query": {
    "bool" : {
      "must" : {
        "term" : { "price" : "30" }
      },
      "filter": {
        "term" : { "avaliable" : "true" }
      },
      "must_not" : {
        "range" : {
          "price" : { "lte" : 10 }
        }
      },
      "should" : [
        { "term" : { "productID.keyword" : "JODL-X-1937-#pV7" } },
        { "term" : { "productID.keyword" : "XHDK-A-1293-#fJ3" } }
      ],
      "minimum_should_match" :1
    }
  }
}


# 如何解决结构化查询 – “包含⽽不是相等”的问题：	改变数据模型，增加字段。
	解决⽅案：增加⼀个 genre count 字段进⾏计数
POST /newmovies/_bulk
{ "index": { "_id": 1 }}
{ "title" : "Father of the Bridge Part II","year":1995, "genre":"Comedy","genre_count":1 }
{ "index": { "_id": 2 }}
{ "title" : "Dave","year":1993,"genre":["Comedy","Romance"],"genre_count":2 }

#must，有算分
POST /newmovies/_search
{
  "query": {
    "bool": {
      "must": [
        {"term": {"genre.keyword": {"value": "Comedy"}}},
        {"term": {"genre_count": {"value": 1}}}

      ]
    }
  }
}

#Filter。不参与算分，结果的score是0
POST /newmovies/_search
{
  "query": {
    "bool": {
      "filter": [
        {"term": {"genre.keyword": {"value": "Comedy"}}},
        {"term": {"genre_count": {"value": 1}}}
        ]

    }
  }
}


#Filtering Context
POST /products/_search
{
  "query": {
    "bool" : {
      "filter": {
        "term" : { "avaliable" : "true" }
      },
      "must_not" : {
        "range" : {
          "price" : { "lte" : 10 }
        }
      }
    }
  }
}


#Query Context
POST /products/_bulk
{ "index": { "_id": 1 }}
{ "price" : 10,"avaliable":true,"date":"2018-01-01", "productID" : "XHDK-A-1293-#fJ3" }
{ "index": { "_id": 2 }}
{ "price" : 20,"avaliable":true,"date":"2019-01-01", "productID" : "KDKE-B-9947-#kL5" }
{ "index": { "_id": 3 }}
{ "price" : 30,"avaliable":true, "productID" : "JODL-X-1937-#pV7" }
{ "index": { "_id": 4 }}
{ "price" : 30,"avaliable":false, "productID" : "QQPX-R-3956-#aD8" }


POST /products/_search
{
  "query": {
    "bool": {
      "should": [
        {
          "term": {
            "productID.keyword": {
            "value": "JODL-X-1937-#pV7"}}
        },
        {
    	  "term": {"avaliable": {
        	"value": true
            }
          }
        }
      ]
    }
  }
}



#嵌套bool，实现了 should not 逻辑
POST /products/_search
{
  "query": {
    "bool": {
      "must": {
        "term": {
          "price": "30"
        }
      },
      "should": [
        {
          "bool": {
            "must_not": {
              "term": {
                "avaliable": "false"
              }
            }
          }
        }
      ],
      "minimum_should_match": 1
    }
  }
}



# 查询语句的结构，会对相关度算分产⽣影响
	同⼀层级下的竞争字段，具有有相同的权重
	通过嵌套 bool 查询，可以改变对算分的影响

POST /animals/_search
{
  "query": {
    "bool": {
      "should": [
        { "term": { "text": "brown" }},
        { "term": { "text": "red" }},
        { "term": { "text": "quick"   }},
        { "term": { "text": "dog"   }}
      ]
    }
  }
}

POST /animals/_search
{
  "query": {
    "bool": {
      "should": [
        { "term": { "text": "quick" }},
        { "term": { "text": "dog"   }},
        {
          "bool":{
            "should":[
               { "term": { "text": "brown" }},
               { "term": { "text": "red" }}
            ]
          }

        }
      ]
    }
  }
}


DELETE blogs
POST /blogs/_bulk
{ "index": { "_id": 1 }}
{"title":"Apple iPad", "content":"Apple iPad,Apple iPad" }
{ "index": { "_id": 2 }}
{"title":"Apple iPad,Apple iPad", "content":"Apple iPad" }


# 控制字段的 Boosting

POST blogs/_search
{
  "query": {
    "bool": {
      "should": [
        {"match": {
          "title": {
            "query": "apple,ipad",
            "boost": 1.1
          }
        }},

        {"match": {
          "content": {
            "query": "apple,ipad",
            "boost": 1
          }
        }}
      ]
    }
  }
}

DELETE news
POST /news/_bulk
{ "index": { "_id": 1 }}
{ "content":"Apple Mac" }
{ "index": { "_id": 2 }}
{ "content":"Apple iPad" }
{ "index": { "_id": 3 }}
{ "content":"Apple employee like Apple Pie and Apple Juice" }


# Not Quite Not
	要求苹果公司的产品信息优先
POST news/_search
{
  "query": {
    "bool": {
      "must": {
        "match":{"content":"apple"}
      }
    }
  }
}




---------



## 单字符串多字段查询：Dis Max Query

单字符串查询
	Google 只提供⼀个输⼊框，查询相关的多个字段
	⽀持按照价格，时间等进⾏过滤






PUT /blogs/_doc/1
{
    "title": "Quick brown rabbits",
    "body":  "Brown rabbits are commonly seen."
}

PUT /blogs/_doc/2
{
    "title": "Keeping pets healthy",
    "body":  "My quick brown fox eats rabbits on a regular basis."
}


# 单字符串查询的实例
# 算分过程
	1. 查询 should 语句中的两个查询
	2. 加和两个查询的评分
	3. 乘以匹配语句的总数
	4. 除以所有语句的总数	

POST /blogs/_search
{
    "query": {
        "bool": {
            "should": [
                { "match": { "title": "Brown fox" }},
                { "match": { "body":  "Brown fox" }}
            ]
        }
    }
}


上例中，title 和 body 相互竞争
	不应该将分数简单叠加，⽽是应该找到单个最佳匹配的字段的评分
Disjunction Max Query
	将任何与任⼀查询匹配的⽂档作为结果返回。采⽤字段上最匹配的评分最终评分返回

# Disjunction Max Query 查询

POST blogs/_search
{
    "query": {
        "dis_max": {
            "queries": [
                { "match": { "title": "Quick pets" }},
                { "match": { "body":  "Quick pets" }}
            ]
        }
    }
}


最佳字段查询调优
	有⼀些情况下，同时匹配 title 和 body 字段的⽂档⽐只与⼀个字段匹配的⽂档的相关度更⾼
	但 disjunction max query 查询只会简单地使⽤单个最佳匹配语句的评分 _score 作为整体评分。怎么办？


Tie Breaker
	1. 获得最佳匹配语句的评分 _score
	2. 将其他匹配语句的评分与 tie_breaker 相乘
	3. 对以上评分求和并规范化

Tier Breaker 是⼀个介于 0-1 之间的浮点数。0代表使⽤最佳匹配；1 代表所有语句同等重要。

# 通过 Tie Breaker 参数调整
POST blogs/_search
{
    "query": {
        "dis_max": {
            "queries": [
                { "match": { "title": "Quick pets" }},
                { "match": { "body":  "Quick pets" }}
            ],
            "tie_breaker": 0.2
        }
    }
}


-------------


## 单字符串多字段查询：Multi Match

三种场景
	最佳字段 (Best Fields)
		当字段之间相互竞争，⼜相互关联。例如 title 和 body 这样的字段。评分来⾃最匹配字段
	多数字段 (Most Fields)
		处理英⽂内容时：⼀种常⻅的⼿段是，在主字段( English Analyzer)，抽取词⼲，加⼊同义词，
		以匹配更多的⽂档。相同的⽂本，加⼊⼦字段(Standard Analyzer)，以提供更加精确的匹配。
		其他字段作为匹配⽂档提⾼相关度的信号。匹配字段越多则越好
	混合字段 (Cross Field)
		对于某些实体，例如⼈名，地址，图书信息。需要在多个字段中确定信息，单个字段只能作为整体的⼀部分。希望在任何这些列出的字段中找到尽可能多的词




# Multi Match Query
	Best Fields 是默认类型，可以不⽤指定
	Minimum should match 等参数可以传递到⽣成的 query中

POST blogs/_search
{
  "query": {
    "multi_match": {
      "type": "best_fields",
      "query": "Quick pets",
      "fields": ["title","body"],
      "tie_breaker": 0.2,
      "minimum_should_match": "20%"
    }
  }
}



POST books/_search
{
    "multi_match": {
        "query":  "Quick brown fox",
        "fields": "*_title"
    }
}


POST books/_search
{
    "multi_match": {
        "query":  "Quick brown fox",
        "fields": [ "*_title", "chapter_title^2" ]
    }
}



DELETE /titles
PUT /titles
{
    "settings": { "number_of_shards": 1 },
    "mappings": {
        "my_type": {
            "properties": {
                "title": {
                    "type":     "string",
                    "analyzer": "english",
                    "fields": {
                        "std":   {
                            "type":     "string",
                            "analyzer": "standard"
                        }
                    }
                }
            }
        }
    }
}

# 英⽂分词器，导致精确度降低，时态信息丢失
PUT /titles
{
  "mappings": {
    "properties": {
      "title": {
        "type": "text",
        "analyzer": "english"
      }
    }
  }
}

POST titles/_bulk
{ "index": { "_id": 1 }}
{ "title": "My dog barks" }
{ "index": { "_id": 2 }}
{ "title": "I see a lot of barking dogs on the road " }


GET titles/_search
{
  "query": {
    "match": {
      "title": "barking dogs"
    }
  }
}

# 使⽤多数字段匹配解决
	⽤⼴度匹配字段 title 包括尽可能多的⽂档——以提升召回率——同时⼜使⽤字段 title.std 作为信号将相关度更⾼的⽂档置于结果顶部
	每个字段对于最终评分的贡献可以通过⾃定义值 boost 来控制。⽐如，使 title 字段更为重要，这样同时也降低了其他信号字段的作⽤：

DELETE /titles
PUT /titles
{
  "mappings": {
    "properties": {
      "title": {
        "type": "text",
        "analyzer": "english",
        "fields": {
        	"std": {
        		"type": "text",
        		"analyzer": "standard"
        }}
      }
    }
  }
}

POST titles/_bulk
{ "index": { "_id": 1 }}
{ "title": "My dog barks" }
{ "index": { "_id": 2 }}
{ "title": "I see a lot of barking dogs on the road " }


GET /titles/_search
{
   "query": {
        "multi_match": {
            "query":  "barking dogs",
            "type":   "most_fields",
            "fields": [ "title", "title.std" ]
        }
    }
}

GET /titles/_search
{
   "query": {
        "multi_match": {
            "query":  "barking dogs",
            "type":   "most_fields",
            "fields": [ "title^10", "title.std" ]
        }
    }
}

# 跨字段搜索
	⽀持使⽤ Operator
	与 copy_to, 相⽐，其中⼀个优势就是它可以在搜索时为单个字段提升权重。

POST address/_search
{
  "query": {
    "multi_match": {
      "type": "cross_fields", 
      "query": "Poland Street W1VC",
      "operator": "and", 
      "fields": ["street","city","country"]
    }
  }
}




------------



## 多语言及中文分词与检索

⾃然语⾔与查询 Recall
	当处理⼈类⾃然语⾔时，有些情况，尽管搜索和原⽂不完全匹配，但是希望搜到⼀些内容

⼀些可采取的优化
	归⼀化词元：清除变⾳符号，如 rôle 的时候也会匹配 role
	抽取词根：清除单复数和时态的差异
	包含同义词
	拼写错误：拼写错误，或者同⾳异形词

混合多语⾔的挑战
	⼀些具体的多语⾔场景
		不同的索引使⽤不同的语⾔ / 同⼀个索引中，不同的字段使⽤不同的语⾔ / ⼀个⽂档的⼀个字段内混合不同的语⾔
混合语⾔存在的⼀些挑战
	词⼲提取：以⾊列⽂档，包含了希伯来语，阿拉伯语，俄语和英⽂
	不正确的⽂档频率 – 英⽂为主的⽂章中，德⽂算分⾼（稀有）
	需要判断⽤户搜索时使⽤的语⾔，语⾔识别（Compact Language Detector)
		例如，根据语⾔，查询不同的索引

分词的挑战
	英⽂分词：You’re 分成⼀个还是多个？Half-baked
	中⽂分词
		分词标准：哈⼯⼤标准中，姓和名分开。 HanLP 是在⼀起的。具体情况需制定不同的标准
		歧义 （组合型歧义，交集型歧义，真歧义）
			中华⼈⺠共和国 / 美国会通过对台售武法案 / 上海仁和服装⼚

⼀些中⽂分词器
	HanLP – ⾯向⽣产环境的⾃然语⾔处理⼯具包
	IK 分词器

 



- 来到杨过曾经生活过的地方，小龙女动情地说：“我也想过过过儿过过的生活。”
- 你也想犯范范玮琪犯过的错吗
- 校长说衣服上除了校徽别别别的
- 这几天天天天气不好
- 我背有点驼，麻麻说“你的背得背背背背佳



#stop word

DELETE my_index
PUT /my_index/_doc/1
{ "title": "I'm happy for this fox" }

PUT /my_index/_doc/2
{ "title": "I'm not happy about my fox problem" }


POST my_index/_search
{
  "query": {
    "match": {
      "title": "not happy fox"
    }
  }
}


#虽然通过使用 english （英语）分析器，使得匹配规则更加宽松，我们也因此提高了召回率，但却降低了精准匹配文档的能力。为了获得两方面的优势，我们可以使用multifields（多字段）对 title 字段建立两次索引： 一次使用 `english`（英语）分析器，另一次使用 `standard`（标准）分析器:

DELETE my_index

PUT /my_index
{
  "mappings": {
    "blog": {
      "properties": {
        "title": {
          "type": "string",
          "analyzer": "english"
        }
      }
    }
  }
}

PUT /my_index
{
  "mappings": {
    "blog": {
      "properties": {
        "title": {
          "type": "string",
          "fields": {
            "english": {
              "type":     "string",
              "analyzer": "english"
            }
          }
        }
      }
    }
  }
}


PUT /my_index/blog/1
{ "title": "I'm happy for this fox" }

PUT /my_index/blog/2
{ "title": "I'm not happy about my fox problem" }

GET /_search
{
  "query": {
    "multi_match": {
      "type":     "most_fields",
      "query":    "not happy foxes",
      "fields": [ "title", "title.english" ]
    }
  }
}


#安装插件
./elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.1.0/elasticsearch-analysis-ik-7.1.0.zip
#安装插件
bin/elasticsearch install https://github.com/KennFalcon/elasticsearch-analysis-hanlp/releases/download/v7.1.0/elasticsearch-analysis-hanlp-7.1.0.zip




#ik_max_word
#ik_smart
#hanlp: hanlp默认分词
#hanlp_standard: 标准分词
#hanlp_index: 索引分词
#hanlp_nlp: NLP分词
#hanlp_n_short: N-最短路分词
#hanlp_dijkstra: 最短路分词
#hanlp_speed: 极速词典分词

POST _analyze
{
  "analyzer": "hanlp_standard",
  "text": ["剑桥分析公司多位高管对卧底记者说，他们确保了唐纳德·特朗普在总统大选中获胜"]

}     

#Pinyin
PUT /artists/
{
    "settings" : {
        "analysis" : {
            "analyzer" : {
                "user_name_analyzer" : {
                    "tokenizer" : "whitespace",
                    "filter" : "pinyin_first_letter_and_full_pinyin_filter"
                }
            },
            "filter" : {
                "pinyin_first_letter_and_full_pinyin_filter" : {
                    "type" : "pinyin",
                    "keep_first_letter" : true,
                    "keep_full_pinyin" : false,
                    "keep_none_chinese" : true,
                    "keep_original" : false,
                    "limit_first_letter_length" : 16,
                    "lowercase" : true,
                    "trim_whitespace" : true,
                    "keep_none_chinese_in_first_letter" : true
                }
            }
        }
    }
}


GET /artists/_analyze
{
  "text": ["刘德华 张学友 郭富城 黎明 四大天王"],
  "analyzer": "user_name_analyzer"
}



----------


## Space Jam，一次全文搜索的实例
	写⼊数据 / 设置 Mapping，设置 Analysis
	查询并⾼亮显示结果
	分析查询结果，通过修改配置和查询，优化搜索的相关性



POST tmdb/_search
{
"_source": ["title","overview"],
 "query": {
   "match_all": {}
 }
}

POST tmdb/_search
{
  "_source": ["title","overview"],
  "query": {
    "multi_match": {
      "query": "basketball with cartoon aliens",
      "fields": ["title","overview"]
    }
  },
  "highlight" : {
        "fields" : {
            "overview" : { "pre_tags" : ["\\033[0;32;40m"], "post_tags" : ["\\033[0m"] },
            "title" : { "pre_tags" : ["\\033[0;32;40m"], "post_tags" : ["\\033[0m"] }

        }
    }
}



------






## 使用 Search Template 和 Index Alias 查询

Search Template – 解耦程序 & 搜索 DSL
	Elasticsearch 的查询语句
		对相关性算分 / 查询性能都⾄关重要
	在开发初期，虽然可以明确查询参数，但是往往还不能最终定义查询的DSL的具体结构
		通过 Search Template 定义⼀个Contract
	各司其职，解耦
		开发⼈员 / 搜索⼯程师 / 性能⼯程师


POST _scripts/tmdb
{
  "script": {
    "lang": "mustache",
    "source": {
      "_source": [
        "title","overview"
      ],
      "size": 20,
      "query": {
        "multi_match": {
          "query": "{{q}}",
          "fields": ["title","overview"]
        }
      }
    }
  }
}

DELETE _scripts/tmdb

GET _scripts/tmdb

POST tmdb/_search/template
{
    "id":"tmdb",
    "params": {
        "q": "basketball with cartoon aliens"
    }
}



# Index Alias 实现零停机运维



PUT movies-2019/_doc/1
{
  "name":"the matrix",
  "rating":5
}

PUT movies-2019/_doc/2
{
  "name":"Speed",
  "rating":3
}

# alias别名

POST _aliases
{
  "actions": [
    {
      "add": {
        "index": "movies-2019",
        "alias": "movies-latest"
      }
    }
  ]
}

POST movies-latest/_search
{
  "query": {
    "match_all": {}
  }
}


# 使⽤ Alias 创建不同查询的视图

POST _aliases
{
  "actions": [
    {
      "add": {
        "index": "movies-2019",
        "alias": "movies-lastest-highrate",
        "filter": {
          "range": {
            "rating": {
              "gte": 4
            }
          }
        }
      }
    }
  ]
}

POST movies-lastest-highrate/_search
{
  "query": {
    "match_all": {}
  }
}



--------

## 综合排序：Function Score Query 优化算分

算分与排序
	Elasticsearch 默认会以⽂档的相关度算分进⾏排序
	可以通过指定⼀个或者多个字段进⾏排序
	使⽤相关度算分(score)排序，不能满⾜某些特定条件
		⽆法针对相关度，对排序实现更多的控制

Function Score Query
	可以在查询结束后，对每⼀个匹配的⽂档进⾏⼀系列的重新算分，根据新⽣成的分数进⾏排序。
提供了⼏种默认的计算分值的函数
	Weight ：为每⼀个⽂档设置⼀个简单⽽不被规范化的权重
	Field Value Factor：使⽤该数值来修改 _score，例如将 “热度”和“点赞数”作为算分的参考因素
	Random Score：为每⼀个⽤户使⽤⼀个不同的，随机算分结果
	衰减函数： 以某个字段的值为标准，距离某个值越近，得分越⾼
	Script Score：⾃定义脚本完全控制所需逻辑





DELETE blogs
PUT /blogs/_doc/1
{
  "title":   "About popularity",
  "content": "In this post we will talk about...",
  "votes":   0
}

PUT /blogs/_doc/2
{
  "title":   "About popularity",
  "content": "In this post we will talk about...",
  "votes":   100
}

PUT /blogs/_doc/3
{
  "title":   "About popularity",
  "content": "In this post we will talk about...",
  "votes":   1000000
}


# 按受欢迎度提升权重
	希望能够将点赞多的 blog，放在搜索列表相对靠前的位置。同时搜索的评分，还是要作为排序的主要依据

新的算分 = ⽼的算分 * 投票数
	投票数 为 0 
	投票数很⼤时

POST /blogs/_search
{
  "query": {
    "function_score": {
      "query": {
        "multi_match": {
          "query":    "popularity",
          "fields": [ "title", "content" ]
        }
      },
      "field_value_factor": {
        "field": "votes"
      }
    }
  }
}


# 使⽤ Modifier 平滑曲线
	新的算分 = ⽼的算分 * log( 1 + 投票数 )

POST /blogs/_search
{
  "query": {
    "function_score": {
      "query": {
        "multi_match": {
          "query":    "popularity",
          "fields": [ "title", "content" ]
        }
      },
      "field_value_factor": {
        "field": "votes",
        "modifier": "log1p"
      }
    }
  }
}

# 引⼊ Factor
	新的算分 = ⽼的算分 * log( 1 + factor *投票数 )

POST /blogs/_search
{
  "query": {
    "function_score": {
      "query": {
        "multi_match": {
          "query":    "popularity",
          "fields": [ "title", "content" ]
        }
      },
      "field_value_factor": {
        "field": "votes",
        "modifier": "log1p" ,
        "factor": 0.1
      }
    }
  }
}


# Boost Mode 和 Max Boost
Boost Mode
	Multiply：算分与函数值的乘积
	Sum：算分与函数的和
	Min / Max：算分与函数取 最⼩/ 最⼤值
	Replace：使⽤函数值取代算分
Max Boost 可以将算分控制在⼀个最⼤值

POST /blogs/_search
{
  "query": {
    "function_score": {
      "query": {
        "multi_match": {
          "query":    "popularity",
          "fields": [ "title", "content" ]
        }
      },
      "field_value_factor": {
        "field": "votes",
        "modifier": "log1p" ,
        "factor": 0.1
      },
      "boost_mode": "sum",
      "max_boost": 3
    }
  }
}


# ⼀致性随机函数
	使⽤场景：⽹站的⼴告需要提⾼展现率
	具体需求：让每个⽤户能看到不同的随机排名，但是也希望同⼀个⽤户访问时，结果的相对顺序，保持⼀致 (Consistently Random)

POST /blogs/_search
{
  "query": {
    "function_score": {
      "random_score": {
        "seed": 911119
      }
    }
  }
}

